{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"AWS/AWS.md/","title":"AWS","text":"<p>Acc\u00e9der \u00e0 la documentation AWS</p>"},{"location":"Git/Git.md/","title":"GIT","text":""},{"location":"Git/Git.md/#git-stash","title":"Git stash","text":"<p>Description Permet de sauvegarder temporairement vos modifications en cours (non index\u00e9es ou index\u00e9es) sans les committer.</p> <p>Commandes</p> <pre><code>git stash\n</code></pre> <p>Sauvegarde les modifications actuelles dans une pile sans les committer.</p> <pre><code>git stash pop\n</code></pre> <p>Applique et supprime la derni\u00e8re sauvegarde de la pile.</p> <pre><code>git stash drop\n</code></pre> <p>Supprime la derni\u00e8re sauvegarde de la pile sans l'appliquer.</p> <pre><code>git stash apply\n</code></pre> <p>Applique une sauvegarde sans la supprimer de la pile.</p> <pre><code>git stash clear\n</code></pre> <p>Supprime toutes les sauvegardes de la pile.</p>"},{"location":"Git/Git.md/#git-log","title":"Git log","text":"<p>Description <code>git log</code> permet de visualiser l'historique des commits dans un d\u00e9p\u00f4t.</p> <p>Commandes</p> <pre><code>git log --oneline\n</code></pre> <p>Affiche un r\u00e9sum\u00e9 des commits sous forme de liste concise avec un identifiant abr\u00e9g\u00e9 et un message.</p> <pre><code>git log -p\n</code></pre> <p>Affiche l'historique des commits avec les diff\u00e9rences (<code>diffs</code>) des fichiers modifi\u00e9s.</p> <pre><code>git log --stat\n</code></pre> <p>Affiche l'historique des commits avec des statistiques sur les fichiers modifi\u00e9s (ajouts, suppressions).</p> <pre><code>git shortlog\n</code></pre> <p>Affiche l'historique des commits par auteur, avec un r\u00e9sum\u00e9 des contributions.</p> <pre><code>git log --graph\n</code></pre> <p>Affiche l'historique des commits sous forme de graphique pour visualiser les branches.</p> <pre><code>git log --oneline --graph\n</code></pre> <p>Affiche l'historique des commits sous forme de graphique simplifi\u00e9 avec une ligne par commit.</p> <pre><code>git log --graph --pretty=\"%C(yellow) Hash: %h %C(blue)Date: %ad %C(red) Message: %s \" --date=human\n</code></pre> <p>Affiche un graphique des commits avec des informations format\u00e9es sur le hash, la date et le message.</p> <pre><code>git log --graph --pretty=format:\"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset\" --abbrev-commit\n</code></pre> <p>Affiche un graphique avec un format personnalis\u00e9, y compris le nom de l'auteur et l'heure du commit.</p> <pre><code>git config --global alias.lg 'log --color --graph --pretty=\"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset\" --abbrev-commit'\n</code></pre> <p>Cr\u00e9e un alias <code>lg</code> pour afficher les commits dans un format graphique personnalis\u00e9.</p> <pre><code>git log -- testfile-02 branchfile-01\n</code></pre> <p>Affiche l'historique des commits pour des fichiers sp\u00e9cifiques dans une branche donn\u00e9e.</p> <pre><code>git log master..second-branch\n</code></pre> <p>Affiche l'historique des commits pour comparer deux branches (ici <code>master</code> et <code>second-branch</code>).</p> <pre><code>git log --merges (ou --no-merges)\n</code></pre> <p>Affiche uniquement les commits de type merge ou les exclut selon l'option choisie.</p> <pre><code>git log --before 2021-4-30 --after=2021-4-1\n</code></pre> <p>Affiche les commits dans une plage de dates sp\u00e9cifique.</p> <pre><code>git log -3\n</code></pre> <p>Affiche les 3 derniers commits.</p> <pre><code>git log -1 --grep=\"JIRA\"\n</code></pre> <p>Recherche les commits contenant un mot-cl\u00e9 dans leur message, ici \"JIRA\".</p>"},{"location":"Git/Git.md/#git-branch","title":"Git branch","text":"<p>Afficher les branches distantes</p> <pre><code>git branch -r\n</code></pre>"},{"location":"Git/Git.md/#erreur-ssl-a-cause-du-ca-root","title":"Erreur SSL \u00e0 cause du CA ROOT","text":""},{"location":"Git/Git.md/#etapes-pour-linux","title":"Etapes pour Linux","text":"<p>Description Si une erreur SSL se produit, il peut \u00eatre n\u00e9cessaire de mettre \u00e0 jour le certificat racine (CA Root) pour r\u00e9soudre le probl\u00e8me.</p> <p>T\u00e9l\u00e9charger le CA ROOT.</p> <p>Copier le fichier ici : <code>/usr/local/share/ca-certificates/ca.crt</code></p> <p>Lancer la commande :</p> <pre><code>sudo update-ca-certificates\n</code></pre>"},{"location":"Git/Git.md/#etapes-pour-windows","title":"\u00c9tapes pour Windows","text":"<ol> <li>Ouvrir le gestionnaire des certificats</li> <li>Appuyez sur Win + R et tapez :    <code>certmgr.msc</code></li> <li>Importer le certificat root</li> <li>Naviguez vers Autorit\u00e9s de certification racines de confiance &gt; Certificats.</li> <li>Faites un clic droit et s\u00e9lectionnez Toutes les t\u00e2ches &gt; Importer.</li> <li>Suivez l\u2019assistant et s\u00e9lectionnez votre certificat root (par exemple, root-ca.crt).</li> <li>Red\u00e9marrer les applications concern\u00e9es</li> </ol> <p>Une fois le certificat ajout\u00e9, red\u00e9marrez les applications ou services (GitLab Runner, Ansible, etc.).</p>"},{"location":"Git/Git.md/#git-config","title":"Git config","text":""},{"location":"Git/Git.md/#option-git-config","title":"Option git config","text":"<ul> <li><code>--system</code> - Table applicable \u00e0 l'ensemble de la machine.</li> <li><code>--global</code> - Configuration pour l'utilisateur actuel.</li> <li><code>--local</code> (par d\u00e9faut) - Configuration pour le d\u00e9p\u00f4t courant.</li> </ul>"},{"location":"Git/Git.md/#configuration-de-base","title":"Configuration de base","text":"<pre><code>git config --global user.email johndoe@myemail.com\n</code></pre> <pre><code>git config --global user.name \"John Doe\"\n</code></pre> <pre><code>git config --global color.status auto\n</code></pre> <pre><code>git config --global color.branch auto\n</code></pre> <pre><code>git config --global color.interactive auto\n</code></pre> <pre><code>git config --global color.diff auto\n</code></pre> <pre><code>git config --global alias.adog \"log --all --decorate --oneline --graph\"\n</code></pre> <pre><code>git config --global core.editor vim\n</code></pre> <p>Le fichier de configuration est <code>~/.gitconfig</code>.</p>"},{"location":"Git/Git.md/#afficher-les-configs","title":"Afficher les configs","text":"<pre><code>git config --list\n</code></pre> <pre><code>git config --list --global\n</code></pre> <pre><code>git config user.name\n</code></pre>"},{"location":"Git/Git.md/#contenu-du-dossier-git","title":"Contenu du dossier .git","text":"<ul> <li>hooks : Contient tous les hooks personnalis\u00e9s. Ce sont des scripts ex\u00e9cut\u00e9s avant ou apr\u00e8s certaines actions (commit, push, etc.).</li> <li>branches : Ce dossier est obsol\u00e8te.</li> <li>HEAD : Pointeur vers la branche actuelle et son dernier commit.</li> <li>config : Fichier de configuration du d\u00e9p\u00f4t.</li> <li>info : Contient les fichiers en attente d'ajout avec <code>git add</code>.</li> <li>refs : Contient l'\u00e9tat actuel des branches et des tags.</li> <li>objects : Contient les objets Git tels que les commits, arbres et blobs.</li> <li>logs : Contient les logs des actions effectu\u00e9es sur le d\u00e9p\u00f4t.</li> <li>description : Description du d\u00e9p\u00f4t.</li> </ul>"},{"location":"Git/Git.md/#git-checkout","title":"Git checkout","text":"<p>Annuler changement sur un fichier non index\u00e9 (not yet added)</p> <pre><code>git checkout testfile-01\n</code></pre>"},{"location":"Git/Git.md/#git-rm","title":"Git rm","text":"<p>Annuler modification index\u00e9e (added)</p> <p>Supprime un fichier de la staging area sans le supprimer du disque.</p> <pre><code>git rm --cached myfile\n</code></pre> <p>Supprime un fichier \u00e0 la fois de Git et du disque, m\u00eame s'il est modifi\u00e9.</p> <pre><code>git rm -f myfile\n</code></pre>"},{"location":"Git/Git.md/#git-reset-et-revert","title":"Git reset et revert","text":""},{"location":"Git/Git.md/#reset","title":"Reset","text":""},{"location":"Git/Git.md/#soft","title":"Soft","text":"<p>Revenir 1 commit en arri\u00e8re sans supprimer les modifications au niveau du fichier.</p> <pre><code>git reset --soft HEAD~1\n</code></pre>"},{"location":"Git/Git.md/#hard","title":"Hard","text":"<p>Revenir 1 commit en arri\u00e8re et supprimer les modifications au niveau du fichier.</p> <pre><code>git reset --hard HEAD~1\n</code></pre>"},{"location":"Git/Git.md/#revert","title":"Revert","text":"<p>Cr\u00e9e un nouveau commit qui annule un ancien commit. Cela permet de rester lin\u00e9aire et de ne pas avoir un HEAD en retard par rapport au HEAD distant.</p> <p>Important : revert annule les modifications apport\u00e9es par le commit cibl\u00e9 par le revert.</p> <pre><code>git revert --no-edit HEAD~1\n</code></pre>"},{"location":"Git/Git.md/#git-diff","title":"Git diff","text":"<pre><code>git diff\n</code></pre> <pre><code>git diff HEAD~1\n</code></pre> <pre><code>git diff HEAD~1 testfile-01\n</code></pre> <pre><code>git diff --staged\n</code></pre>"},{"location":"Git/Git.md/#git-show","title":"Git show","text":"<p>Affiche le r\u00e9sultat de <code>git log</code> + <code>git diff</code> d'un commit. Utiliser <code>git log -p</code> pour tous les commits.</p> <pre><code>git show\n</code></pre> <pre><code>git show HEAD~1\n</code></pre>"},{"location":"Git/Git.md/#git-tag","title":"Git tag","text":""},{"location":"Git/Git.md/#supprimer-un-tag","title":"Supprimer un tag","text":"<pre><code>git tag -d v1.0\n</code></pre>"},{"location":"Git/Git.md/#basculer-sur-un-tag","title":"Basculer sur un tag","text":"<pre><code>git checkout v1.0\n</code></pre>"},{"location":"Git/Git.md/#creer-un-tag-sur-le-commit-courant","title":"Cr\u00e9er un tag sur le commit courant","text":"<pre><code>git tag -a v2.0 -m \"version 2.0. A lot of new features\"\n</code></pre>"},{"location":"Git/Git.md/#afficher-contenu-dun-commit-par-son-tag","title":"Afficher contenu d'un commit par son tag","text":"<pre><code>git show v1.0\n</code></pre>"},{"location":"Git/Git.md/#git-fetch","title":"Git fetch","text":"<p>T\u00e9l\u00e9charge les derniers commits distants sans les int\u00e9grer \u00e0 la branche locale. Ces merges sont dans une branche diff\u00e9rente (ex: <code>origin/main</code>, local c'est <code>main</code>).</p>"},{"location":"Git/Git.md/#git-rebase","title":"Git rebase","text":"<p>R\u00e9\u00e9crit les commits d'une branche dans un historique lin\u00e9aire sur la branche master. Cela permet d'avoir un historique lin\u00e9aire et des identifiants de commit diff\u00e9rents.</p> <p>Pratique : faire un rebase et ensuite merger pour changer la pointe du master sur le dernier commit.</p>"},{"location":"Git/Git.md/#git-remote","title":"Git remote","text":""},{"location":"Git/Git.md/#ajouter-un-remote-repo","title":"Ajouter un remote repo","text":"<pre><code>git remote add origin $URI\n</code></pre>"},{"location":"Git/Git.md/#afficher-les-repos-distants","title":"Afficher les repos distants","text":"<pre><code>git remote -v\n</code></pre>"},{"location":"Git/Git.md/#git-fork","title":"Git fork","text":"<p>Cr\u00e9er une copie d'un projet, modifier et cr\u00e9er ensuite une PR (pull request) pour demander au projet fork\u00e9 d'accepter et de merger les modifications. Utilis\u00e9 surtout sur les projets sur lesquels on n'a pas les droits de pull.</p>"},{"location":"Git/Git.md/#git-merge","title":"Git merge","text":""},{"location":"Git/Git.md/#fast-forward-merge","title":"Fast-forward merge","text":"<p>Le master n'a aucun nouveau commit compar\u00e9 \u00e0 la branche \u00e0 merger.</p>"},{"location":"Git/Git.md/#no-fast-forward-merge","title":"No fast-forward merge","text":"<p>Le master a de nouveaux commits compar\u00e9 \u00e0 la branche \u00e0 merger. Un commit de merge est cr\u00e9\u00e9.</p>"},{"location":"Jenkins/Jenkins.md/","title":"Jenkins","text":""},{"location":"Jenkins/Jenkins.md/#notes","title":"Notes","text":""},{"location":"Jenkins/Jenkins.md/#reference-cours","title":"R\u00e9f\u00e9rence cours","text":"<p>Coursera : Jenkins for Beginners</p>"},{"location":"Mkdocs/Mkdocs.md/","title":"Mkdocs","text":""},{"location":"Mkdocs/Mkdocs.md/#1-installation-des-outils-necessaires","title":"1. Installation des outils n\u00e9cessaires","text":"<p>Assure-toi d'avoir Python et MkDocs install\u00e9s :</p> <pre><code># Installer MkDocs\npip install mkdocs\n\n# (Optionnel) Installer le th\u00e8me Material pour MkDocs\npip install mkdocs-material\n</code></pre>"},{"location":"Mkdocs/Mkdocs.md/#2-creer-un-projet-mkdocs","title":"2. Cr\u00e9er un projet MkDocs","text":"<p>Dans le terminal, ex\u00e9cute :</p> <pre><code>mkdocs new mon-site\n</code></pre> <p>Cela cr\u00e9e la structure suivante :</p> <pre><code>mon-site/\n\u2502\u2500\u2500 mkdocs.yml       # Fichier de configuration\n\u2502\u2500\u2500 docs/            # Contient les fichiers Markdown\n    \u2514\u2500\u2500 index.md     # Page d'accueil\n\n</code></pre>"},{"location":"Mkdocs/Mkdocs.md/#3-ajouter-tes-notes-obsidian","title":"3. Ajouter tes notes Obsidian","text":"<ul> <li>Copie tous tes fichiers <code>.md</code> dans le dossier <code>docs</code>.</li> <li>Structure ton contenu dans des sous-dossiers si n\u00e9cessaire.  </li> </ul> <pre><code>docs/\n\u2502\u2500\u2500 index.md\n\u2502\u2500\u2500 Docker/\n\u2502   \u2514\u2500\u2500 Docker.md\n\u2502\u2500\u2500 Jenkins/\n    \u2514\u2500\u2500 Jenkins.md\n\n</code></pre>"},{"location":"Mkdocs/Mkdocs.md/#4-configurer-mkdocsyml","title":"4. Configurer <code>mkdocs.yml</code>","text":"<p>Ouvre <code>mkdocs.yml</code> et configure la navigation et le th\u00e8me :</p> <pre><code>site_name: Mes Notes\nnav:\n  - Accueil: index.md\n  - Docker: Docker/Docker.md\n  - Jenkins: Jenkins/Jenkins.md\ntheme:\n  name: material\n\u00a0 palette:\n\u00a0 \u00a0 - scheme: default\n\u00a0 \u00a0 \u00a0 primary: blue\n\u00a0 \u00a0 \u00a0 accent: blue\n\u00a0 \u00a0 \u00a0 toggle:\n\u00a0 \u00a0 \u00a0 \u00a0 icon: material/weather-sunny\n\u00a0 \u00a0 \u00a0 \u00a0 name: Basculer en mode sombre\n\u00a0 \u00a0 - scheme: slate\n\u00a0 \u00a0 \u00a0 primary: blue\n\u00a0 \u00a0 \u00a0 accent: blue\n\u00a0 \u00a0 \u00a0 toggle:\n\u00a0 \u00a0 \u00a0 \u00a0 icon: material/weather-night\n\u00a0 \u00a0 \u00a0 \u00a0 name: Basculer en mode clair\n</code></pre>"},{"location":"Mkdocs/Mkdocs.md/#5-tester-localement-le-site","title":"5. Tester localement le site","text":"<p>Lance la commande suivante pour voir ton site en local :</p> <pre><code>mkdocs serve\n</code></pre> <p>Acc\u00e8de \u00e0 <code>http://127.0.0.1:8000</code> dans ton navigateur.</p>"},{"location":"Mkdocs/Mkdocs.md/#6-initialiser-le-depot-github","title":"6. Initialiser le d\u00e9p\u00f4t GitHub","text":"<p>Si ton projet n'est pas encore li\u00e9 \u00e0 un d\u00e9p\u00f4t GitHub, initialise-le :</p> <pre><code>git init\ngit add .\ngit commit -m \"Initialisation du projet MkDocs\"\ngit remote add origin https://github.com/ton-utilisateur/ton-depot.git\ngit push -u origin master\n</code></pre>"},{"location":"Mkdocs/Mkdocs.md/#7publier-sur-github-pages","title":"7.Publier sur GitHub Pages","text":"<p>Utilise la commande suivante pour d\u00e9ployer ton site : <code>mkdocs gh-deploy</code> Cela :</p> <ol> <li>G\u00e9n\u00e8re le site statique.</li> <li>Publie le site sur la branche <code>gh-pages</code> de ton d\u00e9p\u00f4t GitHub.</li> </ol>"},{"location":"Mkdocs/Mkdocs.md/#8-activer-github-pages","title":"8. Activer GitHub Pages","text":"<ol> <li>Va dans ton d\u00e9p\u00f4t GitHub \u2192 Settings \u2192 Pages.</li> <li>Choisis la branche <code>gh-pages</code> comme source.</li> <li>Ton site sera accessible \u00e0 :</li> </ol> <pre><code>https://ton-utilisateur.github.io/ton-depot/\n</code></pre>"}]}